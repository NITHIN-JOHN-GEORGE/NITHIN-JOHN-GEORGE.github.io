[{"content":"","permalink":"https://nithin-john-george.github.io/blog/internals-of-ls-a-command/","summary":"","title":"What happens when you type ls -a in the shell"},{"content":"","permalink":"https://nithin-john-george.github.io/projects/auto-heal-script/","summary":"","title":"Service Autohealer Using Shell Script"},{"content":"","permalink":"https://nithin-john-george.github.io/projects/disk_cpu_mem_monitor/","summary":"","title":"Disk CPU Memory Monitor Using Shell Scripting"},{"content":"ðŸ”— GitHub ","permalink":"https://nithin-john-george.github.io/projects/apache-log-parser-shell-script/","summary":"ðŸ”— GitHub ","title":"Apache Web Server Log Parsing Tool Using Shell Scripting"},{"content":"ðŸ”— GitHub Description It\u0026rsquo;s a bash script to show a complete inventory of an Linux OS and it might be useful for Linux system/support engineers who lot of servers in daily life . Instead of manually executing all the commands on each of server which is hell lot of task to do , you can execute this script and this script generates all needed inventory to a file which you can mail to your manager.\nThis is a small project done by me after studying shell scripting and i have used mix of different concepts like functions , conditional statements , loops , exit status , command chaining , and used different text processing commands like awk ,sed , grep , cut etc \u0026hellip;\nFeature The script will collect informations from OS such as :\nOS Details ( such as Hostname , OS_name , OS_version , OS_Kernel_Version ) Hypervisor Details CPU Details ( such as No of cores , CPU type , CPU usage , Load Average of server) Memory Details Disk Detais Network Detail ( like IP address , DNS SERVERS , DNS_DOMAIN , Total no of interfaces , List of interfaces ) SELINUX status SWAP details Pre-Requestes netstat package must be available Passwordless SSH authentication b/w servers ( Note If you are using password environment u have to use sshpass utility to provide password ) Common user accross all servers Sudo privilege to that user This script currently supports only rhel 7.x and 8.x (ubuntu servers will be added in future release)\nHow to use this script - Create a user common in all servers and make passwordless authentication connection b/w the servers. (Give sudo access to the user) - Switch to that user. - git clone https://github.com/NITHIN-JOHN-GEORGE/MULTIPLE-SERVER-INVENTORY-SHELL-SCRIPT.git - cd MULTIPLE-SERVER-INVENTORY-SHELL-SCRIPT - chmod +x MULTIPLE_SERVER_INVENTORY.sh - Create a servers_list.txt with updated list of server in which you need inventory. - Update the username in the script starting USER=\u0026lt;username\u0026gt; - ./MULTIPLE_SERVER_INVENTORY.sh Script Running ","permalink":"https://nithin-john-george.github.io/projects/server-inventory-shell-script/","summary":"ðŸ”— GitHub Description It\u0026rsquo;s a bash script to show a complete inventory of an Linux OS and it might be useful for Linux system/support engineers who lot of servers in daily life . Instead of manually executing all the commands on each of server which is hell lot of task to do , you can execute this script and this script generates all needed inventory to a file which you can mail to your manager.","title":"Generating Multiple Server Inventory Using Shell Scripting"},{"content":" On-Demand Staging Box setup with Terraform , Python , ECS and Github-Actions Self Hosted Runners for Github Action on K8s with Karpenter Jenkins to Github-Actions Migration Docker Build Optimization AWS Cost-Tracker Automation with Python (Boto3) Cost Attribution ","permalink":"https://nithin-john-george.github.io/experience/porter/","summary":" On-Demand Staging Box setup with Terraform , Python , ECS and Github-Actions Self Hosted Runners for Github Action on K8s with Karpenter Jenkins to Github-Actions Migration Docker Build Optimization AWS Cost-Tracker Automation with Python (Boto3) Cost Attribution ","title":"Devops SDE-2 (Cloud Infrastructure)"},{"content":"Description Established efficient release engineering process incorporating git branching strategies for the organization. Managed Git Repositories, including branching and merging, and pull requests to manage codebase changes and collaborate with development teams. Responsible for setting up the fully automated CI/CD pipeline for Kubernetes Environment incorporating GitOps with Jenkins \u0026amp; ArgoCD Was responsible for setting up an automated Jenkins Pipeline for Lambda Deployment. Dockerized Node Js and Ruby on Rails Applications and pushed them to ECR utilizing efficient image tagging and optimized image size by using Multistage Dockerfile. Used Terraform (IAC) to create a wide range of scalable infrastructure on both AWS and GCP platforms, including networking components, EKS, GKE, RDS, Data pipeline infra, SSM, KMS, Lambda, and its associated triggers. Set UP Data pipeline infra to track data changes from MongoDB, MySQL, and Postgres using Terraform. Used Terraform Cloud as a CI/CD tool for cloud infrastructure automation. Migrated the applications running in the cloud vm to the Kubernetes cluster. Deployed multiple applications to Kubernetes, exposing them through the ALB Ingress controller to provide external access to services. Troubleshoot and resolve issues in Kubernetes clusters Access management to Developers to databases and AWS accounts utilizing IAM roles and policies to grant developers secure access to resources. Used Cloudflare for rate limiting, DDoS protection, setting WAF rules to restrict the domain to access over VPN, Pointing DNS records Implemented Cloudflare Health check and Cloudwatch Synthetic canaries to check the status of APIs and integrated with Opsgenie and Slack to get alerts Implemented Cloud Watch Monitoring for AWS resources and integrated with Opsgenie and Slack to get alerts based on Priority levels. Implemented Site to Site VPN connection between AWS and Perimeter 81 network for accessing the internal VPC network via VPN connections. Infrastructure Cost Optimization to reduce billings ","permalink":"https://nithin-john-george.github.io/experience/aptonworks/","summary":"Description Established efficient release engineering process incorporating git branching strategies for the organization. Managed Git Repositories, including branching and merging, and pull requests to manage codebase changes and collaborate with development teams. Responsible for setting up the fully automated CI/CD pipeline for Kubernetes Environment incorporating GitOps with Jenkins \u0026amp; ArgoCD Was responsible for setting up an automated Jenkins Pipeline for Lambda Deployment. Dockerized Node Js and Ruby on Rails Applications and pushed them to ECR utilizing efficient image tagging and optimized image size by using Multistage Dockerfile.","title":"DevOps Engineer"},{"content":"Description Server Configuration and Support Writing shell scripts as per requirement for automation Responding to employees\u0026rsquo; IT support requests via taking systems remotely ","permalink":"https://nithin-john-george.github.io/experience/geojit/","summary":"Description Server Configuration and Support Writing shell scripts as per requirement for automation Responding to employees\u0026rsquo; IT support requests via taking systems remotely ","title":"System Engineer"}]